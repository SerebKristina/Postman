{
	"info": {
		"_postman_id": "26a5ed59-0971-4a91-b781-41a5f0d1bdae",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First_r",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code 200 (статус код 200):\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Check that the correct string is coming in the response body(Проверить, что в body приходит правильный string):\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//status code 200 (статус код 200):\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json (parse response body in json):\r",
							"var json_data = JSON.parse(responseBody);\r",
							"\r",
							"//Проверить, что name в ответе равно name request (Check that the name in the response is equal to name request):\r",
							"pm.test(\"check name\", function () {\r",
							"        pm.expect(json_data.name).to.eql(\"ivan\");\r",
							"});\r",
							"//Проверить, что age в ответе равно age request (Check that the age in the response is equal to age request):\r",
							"pm.test(\"check age\", function () {\r",
							"        pm.expect(json_data.age).to.eql(\"27\");\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary request(Check that salary in the response is equal to salary request):\r",
							"pm.test(\"check salary\", function () {\r",
							"        pm.expect(json_data.salary).to.eql(500);\r",
							"});\r",
							"//Спарсить request ()\r",
							"var req = request.data;\r",
							"//Проверить, что name в ответе равно name s request,name забрать из request(Check that the name in the response is equal to the name request):\r",
							"pm.test(\"check name_r1\", function () {\r",
							"        pm.expect(json_data.name).to.eql (req.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age request, age забрать из request (Check that the age in the response is equal to the age request, take the age from the request):\r",
							"pm.test(\"check age_1\", function () {\r",
							"        pm.expect(json_data.age).to.eql (req.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary request salary забрать из request (Check that salary in the response is equal to salary request salary take from request):\r",
							"var salary = parseInt(req.salary)\r",
							"\r",
							"pm.test(\"check salary_r1\", function () {\r",
							"        pm.expect(json_data.salary).to.eql(salary)\r",
							"});\r",
							"//Вывести в консоль параметр family из response (Print the family parameter from response to the console):\r",
							"var family = pm.response.json();\r",
							"\r",
							"let resp_name = family.family\r",
							"console.log (\"resp_name =\", resp_name)\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4,salary забрать из request (Check that u_salary_1_5_year in the response is equal to salary*4,take salary from request):\r",
							"let resp = pm.response.json();\r",
							"var u_salary_1_5_year = parseInt(resp.family.u_salary_1_5_year);\r",
							"\r",
							"pm.test(\"check salary\", function () {\r",
							"        pm.expect(salary*4).to.eql(u_salary_1_5_year)\r",
							"});\r",
							"console.log(salary*4 + \" = \" + u_salary_1_5_year);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "ivan",
							"type": "default"
						},
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200 (status code is 200):\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json(parse response body in json):\r",
							"var json_data = JSON.parse(responseBody);\r",
							"\r",
							"//Спарсить request (parse request):\r",
							"let req_par = pm.request.url.query.toObject();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request ,name забрать из request (Check that the name in the response is equal to the name request ,take the name from the request):\r",
							"pm.test(\"check name\", function () {\r",
							"        pm.expect(req_par.name).to.eql(json_data.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age request, age забрать из request (Check that age in the response is equal to age request age to take from request):\r",
							"pm.test(\"check age\", function () {\r",
							"        pm.expect(req_par.age).to.eql(json_data.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary  request, salary забрать из request(Check that salary in the response is equal to salary request, take salary from request):\r",
							"pm.test(\"check salary\", function () {\r",
							"        pm.expect(+req_par.salary).to.eql(json_data.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response (Output the family parameter from response to the console):\r",
							"var family = JSON.parse(responseBody);\r",
							"console.log (\"family =\", family);\r",
							"//Проверить, что у параметра dog есть параметры name (Check that the \"dog\" parameter has \"name\" parameters):\r",
							"var family = JSON.parse(responseBody);\r",
							"pm.test(\"check dog_name\", function () {\r",
							"       pm.expect(family.family.pets.dog).to.have.any.key(\"name\");\r",
							"});\r",
							"//Проверить, что у параметра dog есть параметры age(Check that the \"dog\" parameter has \"age\" parameters):\r",
							"pm.test(\"check dog_age\", function () {\r",
							"        pm.expect(family.family.pets.dog).to.have.any.key(\"age\");\r",
							"});\r",
							"//Проверить, что параметр name имеет значение Luky(Check that the \"name\" parameter has the value \"Luky\"):\r",
							"pm.test(\"check dog_name1\", function () {\r",
							"        pm.expect(family.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//Проверить, что параметр age имеет значение 4 (Check that the \"age\" parameter has the value \"4\"):\r",
							"pm.test(\"check dog_age1\", function () {\r",
							"        pm.expect(family.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Lisa&age=44&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Lisa"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200 (Status code is 200):\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json (parse response body in json):\r",
							"var resp_body = JSON.parse(responseBody);\r",
							"//Спарсить request (parse request):\r",
							"let params_req = pm.request.url.query.toObject();\r",
							"//Проверить, что name в ответе равно name request,name забрать из request (Check that the name in the response is equal to the name request ,take the name from the request):\r",
							"pm.test(\"check name\", function () {\r",
							"        pm.expect(resp_body.name).to.eql(params_req.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age из request ,age забрать из request(Check that age in the response is equal to age request age to take from request):\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(+resp_body.age).to.eql(+params_req.age);\r",
							"});\r",
							"//Вывести в консоль параметр salary из request (Output the salary parameter from request to the console):\r",
							"console.log (\"salary = \", params_req.salary);\r",
							"//Вывести в консоль параметр salary из response (Output the salary parameter from response to the console):\r",
							"let salary_r = resp_body.salary;\r",
							"console.log (\"salary_r =\", salary_r);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response (Output the null element of the salary parameter from response to the console):\r",
							"console.log (\"salary_r =\", salary_r[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response(Output to the console the first element of the salary parameter the salary parameter from response);\r",
							"console.log (\"salary_r =\", salary_r[1]);\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response (Output the second element of the salary parameter to the console the salary parameter from response):\r",
							"console.log (\"salary_r =\", salary_r[2]);\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request,salary забрать из request (Check that the null element of the salary parameter is equal to salary from request,salary is taken from request):\r",
							"pm.test(\"salary_r0\", function () {\r",
							"    pm.expect(resp_body.salary[0]).to.eql(500);\r",
							"});\r",
							"//Проверить, что 1-й элемент параметра salary равен (salary*2) из request, salary забрать из request(Check that the 1st element of the salary parameter is equal to (salary*2) from request, take salary from request):\r",
							"pm.test(\"salary_r1\", function () {\r",
							"    pm.expect(+resp_body.salary[1]).to.eql(params_req.salary*2);\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен (salary*3) из request,salary забрать из request (Check that the 2nd element of the salary parameter is equal to (salary*3) from request,take salary from request):\r",
							"pm.test(\"salary_r2\", function () {\r",
							"    pm.expect(+resp_body.salary[2]).to.eql(params_req.salary*3);\r",
							"});\r",
							"//Передать в окружение переменную \"name\" (Pass the \"name\" variable to the environment):\r",
							"pm.environment.set(\"name\", resp_body.name);\r",
							"//Передать в окружение переменную \"age\" (Pass the \"age\" variable to the environment):\r",
							"pm.environment.set(\"age\", resp_body.age);\r",
							"//Передать в окружение переменную \"salary\"(Pass the \"salary\" variable to the environment):\r",
							"pm.environment.set(\"salary\", resp_body.salary[0]);\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary (Write a loop that outputs the list items from the \"salary\" parameter to the console in order):\r",
							"for (let i = 0; i < resp_body.salary.lenght; i++) {console.log(resp_body.salary[i])};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Kira&age=35&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Kira"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200 (Status code is 200):\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json (Parse the response body in json):\r",
							"var resp_b = JSON.parse(responseBody);\r",
							"//Спарсить request (parse request):\r",
							"let req_data = request.data;\r",
							"//Проверить, что json response имеет параметр start_qa_salary (Check that the json response has the start_qa_salary parameter):\r",
							"pm.test(\"Check start_salary\", function () {\r",
							"pm.expect(resp_b).to.have.any.key(\"start_qa_salary\");});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months(Check that the json response has the parameter qa_salary_after_6_months):\r",
							"pm.test(\"Check qa_salary_after_6_months\", function () {\r",
							"pm.expect(resp_b).to.have.any.key(\"qa_salary_after_6_months\");});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months (Check that the json response has the parameter qa_salary_after_12_months):\r",
							"pm.test(\"Check qa_salary_after_12_months\", function () {\r",
							"pm.expect(resp_b).to.have.any.key(\"qa_salary_after_12_months\");});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year(Check that the json response has the qa_salary_after parameter_1.5_year):\r",
							"pm.test(\"Check qa_salary_after_1.5_year\", function () {\r",
							"pm.expect(resp_b).to.have.any.key(\"qa_salary_after_1.5_year\");});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years (Check that the json response has the qa_salary_after parameter_3.5_years):\r",
							"pm.test(\"Check qa_salary_after_3.5_years\", function () {\r",
							"pm.expect(resp_b).to.have.any.key(\"qa_salary_after_3.5_years\");});\r",
							"//Проверить, что json response имеет параметр person (Check that the json response has the 'person' parameter):\r",
							"pm.test(\"Check person\", function (){\r",
							"pm.expect(resp_b).to.have.any.key(\"person\");});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request,salary забрать из request (Check that the start_qa_salary parameter is equal to salary from request,salary is taken from request):\r",
							"pm.test('Check salary_req', function(){\r",
							"pm.expect(resp_b.start_qa_salary).to.eql(+req_data.salary);});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request),(Check that the qa_salary_after_6_months parameter is equal to salary*2 from request (salary to take from request):\r",
							"pm.test('Check salary_req2', function(){\r",
							"pm.expect(resp_b.qa_salary_after_6_months).to.eql(+req_data.salary*2);});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request),(Check that the qa_salary_after_12_months parameter is equal to salary*2.7 from request (salary to take from request)):\r",
							"pm.test('Check salary_req3', function(){\r",
							"pm.expect(resp_b.qa_salary_after_12_months).to.eql(+req_data.salary*2.7);});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request), (Check that the qa_salary_after parameter_1.5_year equals salary*3.3 from request (salary pick up from request)):\r",
							"pm.test('Check salary_req3', function(){\r",
							"pm.expect(resp_b['qa_salary_after_1.5_year']).to.eql(+req_data.salary*3.3);});\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из reques), (Check that the qa_salary_after parameter_3.5_years is equal to salary*3.8 from request (salary is taken from request)):\r",
							"pm.test('Check salary_req4', function(){\r",
							"pm.expect(resp_b['qa_salary_after_3.5_years']).to.eql(+req_data.salary*3.8);});\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request), (Check that in the person parameter, the first element from u_name is equal to salary from request (salary is taken from request)):\r",
							"var person = JSON.parse(responseBody);\r",
							"pm.test('check name', function (){\r",
							"pm.expect(+resp_b.person.u_name[1]).to.eql(+req_data.salary);});\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request), (Check that the u_age parameter is equal to age from request (age is taken from request)):\r",
							"pm.test('check age', function (){\r",
							"pm.expect(+resp_b.person.u_age).to.eql(+req_data.age);});\r",
							"//Проверить,что параметр u_salary_5_years равен salary*4.2 из request(salary забрать из request),(Check that the u_salary_5_years parameter is equal to salary*4.2 from request (salary is taken from request))\r",
							"pm.test('check u_salary_5_years', function (){\r",
							"pm.expect(resp_b.person.u_salary_5_years).to.eql(+req_data.salary*4.2);});\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person (Write a loop that outputs the list items from the person parameter to the console in order):\r",
							"var pers_len = Object.keys(resp_b.person).length;\r",
							"console.log(pers_len);\r",
							"for (var i = 0; i < pers_len; i++){\r",
							"console.log(Object.keys(resp_b.person)[i]);};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}